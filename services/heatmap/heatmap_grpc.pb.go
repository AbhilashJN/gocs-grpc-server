// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package heatmap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeatmapServiceClient is the client API for HeatmapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeatmapServiceClient interface {
	GetHeatmapPositions(ctx context.Context, in *HeatmapRequest, opts ...grpc.CallOption) (*HeatmapResponse, error)
}

type heatmapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeatmapServiceClient(cc grpc.ClientConnInterface) HeatmapServiceClient {
	return &heatmapServiceClient{cc}
}

func (c *heatmapServiceClient) GetHeatmapPositions(ctx context.Context, in *HeatmapRequest, opts ...grpc.CallOption) (*HeatmapResponse, error) {
	out := new(HeatmapResponse)
	err := c.cc.Invoke(ctx, "/heatmap.HeatmapService/GetHeatmapPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeatmapServiceServer is the server API for HeatmapService service.
// All implementations must embed UnimplementedHeatmapServiceServer
// for forward compatibility
type HeatmapServiceServer interface {
	GetHeatmapPositions(context.Context, *HeatmapRequest) (*HeatmapResponse, error)
	mustEmbedUnimplementedHeatmapServiceServer()
}

// UnimplementedHeatmapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHeatmapServiceServer struct {
}

func (UnimplementedHeatmapServiceServer) GetHeatmapPositions(context.Context, *HeatmapRequest) (*HeatmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeatmapPositions not implemented")
}
func (UnimplementedHeatmapServiceServer) mustEmbedUnimplementedHeatmapServiceServer() {}

// UnsafeHeatmapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeatmapServiceServer will
// result in compilation errors.
type UnsafeHeatmapServiceServer interface {
	mustEmbedUnimplementedHeatmapServiceServer()
}

func RegisterHeatmapServiceServer(s grpc.ServiceRegistrar, srv HeatmapServiceServer) {
	s.RegisterService(&HeatmapService_ServiceDesc, srv)
}

func _HeatmapService_GetHeatmapPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeatmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatmapServiceServer).GetHeatmapPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heatmap.HeatmapService/GetHeatmapPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatmapServiceServer).GetHeatmapPositions(ctx, req.(*HeatmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeatmapService_ServiceDesc is the grpc.ServiceDesc for HeatmapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeatmapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heatmap.HeatmapService",
	HandlerType: (*HeatmapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeatmapPositions",
			Handler:    _HeatmapService_GetHeatmapPositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/heatmap/heatmap.proto",
}
