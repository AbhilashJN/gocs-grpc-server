// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package map_details

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapDetailsServiceClient is the client API for MapDetailsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapDetailsServiceClient interface {
	GetMapName(ctx context.Context, in *MapNameRequest, opts ...grpc.CallOption) (*MapNameResponse, error)
}

type mapDetailsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapDetailsServiceClient(cc grpc.ClientConnInterface) MapDetailsServiceClient {
	return &mapDetailsServiceClient{cc}
}

func (c *mapDetailsServiceClient) GetMapName(ctx context.Context, in *MapNameRequest, opts ...grpc.CallOption) (*MapNameResponse, error) {
	out := new(MapNameResponse)
	err := c.cc.Invoke(ctx, "/map_details.MapDetailsService/GetMapName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapDetailsServiceServer is the server API for MapDetailsService service.
// All implementations must embed UnimplementedMapDetailsServiceServer
// for forward compatibility
type MapDetailsServiceServer interface {
	GetMapName(context.Context, *MapNameRequest) (*MapNameResponse, error)
	mustEmbedUnimplementedMapDetailsServiceServer()
}

// UnimplementedMapDetailsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMapDetailsServiceServer struct {
}

func (UnimplementedMapDetailsServiceServer) GetMapName(context.Context, *MapNameRequest) (*MapNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapName not implemented")
}
func (UnimplementedMapDetailsServiceServer) mustEmbedUnimplementedMapDetailsServiceServer() {}

// UnsafeMapDetailsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapDetailsServiceServer will
// result in compilation errors.
type UnsafeMapDetailsServiceServer interface {
	mustEmbedUnimplementedMapDetailsServiceServer()
}

func RegisterMapDetailsServiceServer(s grpc.ServiceRegistrar, srv MapDetailsServiceServer) {
	s.RegisterService(&MapDetailsService_ServiceDesc, srv)
}

func _MapDetailsService_GetMapName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapDetailsServiceServer).GetMapName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/map_details.MapDetailsService/GetMapName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapDetailsServiceServer).GetMapName(ctx, req.(*MapNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapDetailsService_ServiceDesc is the grpc.ServiceDesc for MapDetailsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapDetailsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "map_details.MapDetailsService",
	HandlerType: (*MapDetailsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMapName",
			Handler:    _MapDetailsService_GetMapName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/map_details/map_details.proto",
}
